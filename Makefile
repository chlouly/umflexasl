# Makefile generated by imake - do not edit!

#
#
#

# ====================================================================
#
#  Included macros and rules from <Imake.cf> and <Imake.rules>
#
# ====================================================================

PWD        = /home/hernan/epic/MR30/asl3dflex
TOP        = /ESE_MR30.1_R01
OS_NAME    = Linux
OS_RELEASE = 5_14_21__150400_24_81__default

SHELL = /bin/sh

BASENAME = /bin/basename
CAT      = /bin/cat
CHMOD    = /bin/chmod
CP       = /bin/cp
CUT      = /usr/bin/cut
DD       = /bin/dd
GREP     = /bin/grep
MV       = /bin/mv
RM       = /bin/rm -f
SED      = /bin/sed
SORT     = /bin/sort
TAIL     = /usr/bin/tail
TAR      = /bin/tar
TOUCH    = /bin/touch

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Common targets found in all makefiles
#
# ====================================================================

# --------------------------------------------------------------------
#
#  Rule: "CommonTargets()"
#

all:: hw sim

clean::

hw::

hw-ice::

hw-mgd::

install::

sim::

test::

# --------------------------------------------------------------------

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Beginning of included template file: "EPIC.tmpl"
#
# ====================================================================

#
# These are parameter definitions common to all users who use the
#    Epic and Epic+ preprocessors.
#

CREATE_HOSTDECL_DEFS    = $(TOP)/psd/build-tools/export/noarch/bin/createHostdeclDefs
CREATE_CNV_ENDIAN_INPUT = $(TOP)/psd/build-tools/export/noarch/bin/createCnvEndianInput
EC                      = $(TOP)/psd/build-tools/export/noarch/bin/ec
EP_PROCESS              = $(TOP)/psd/build-tools/export/dev-linux32/bin/processefile
EP_MERGE                = $(TOP)/psd/build-tools/export/dev-linux32/bin/mergehfiles
EP_BRT                  = $(TOP)/psd/build-tools/export/dev-linux32/bin/buildruntime
EP_CONTIG               = $(TOP)/psd/build-tools/export/noarch/bin/contigCVs
EP_LINK                 = $(TOP)/psd/build-tools/export/noarch/bin/createEpicPlusLinks

ENDIAN_CONVERTER =     $(TOP)/3p/endian_converter/endian_converter

# Locking flag to modify CVs.
# Use -DMCVALL to allow all CVs to be modified.
M_CVS =

#
# These are endian conversion definitions
# The idea is to pass to the endian-converter, the same flags as the
# host-hardware PSD.
#

ENDIAN_CONVERTER_FLAGS =     -m32     $(M_CVS)     -DHOST_TGT     -DMGD_IF     -DLX_ENBLpopup     -DPSD_HW

ENDIAN_EFLAG =

ENDIAN_EPFLAG =     -DEXTERN=extern

#
# End common Epic/Epic+ parameter definitions.
#

CNV_ENDIAN_FILES = $(PSD).cnvendian.input.c \
                   $(PSD).cnvendian.input.i \
                   $(PSD).cnvendian.private.h \
                   $(PSD).cnvendian.globalvar.h \
                   $(PSD).cnvendian.c \
                   $(PSD).cnvendian.api.h

# --------------------------------------------------------------------
#
#  Rule: "NoWarnings()"
#
#  This rule is empty for the Epic/Epic+ compilers.  It is only used
#  by the host and target compilers.
#
# --------------------------------------------------------------------

# Global PSD compiler optimization flag.  By default we apply -O2 optimization.
# Call

# --------------------------------------------------------------------
#
#  Rule: "PsdOptimization(LEVEL)"
#

PSD_OPTIMIZATION_FLAG = -OLEVEL

# -------------------------------------------------------------------- to overwrite the setting.

PSD_OPTIMIZATION_FLAG = -O2

#
# End common GCC parameter definitions.
#

# --------------------------------------------------------------------
#
#  Rule: "StandardSuffixRules()"
#

%.epic: %.e
	@echo "=========================================================="
	@echo "   Processing $*"
	@echo "=========================================================="

	$(RM) ${@F} $*.host.c $*.host.cpp $*.tgt.c $*.tgt.cpp \
		$*.global.h $*.allcv.h \
		$*.tgtex.h $*.hostdecl.h $*.tgtdecl.h $*.exportstr.h \
		$*.runtime.h $*.ext.h $*.host.map \
		cvinit.in predownload.in

	$(EC) $(PG_FLAG) $(ADD_EFLAGS) $(EPIC_INCLUDES) $<

	$(TOUCH) ${@F}

%.epicplus: %.e
	@echo "=========================================================="
	@echo "   Processing $*"
	@echo "=========================================================="

	$(RM) ${@F} $*.host.c $*.host.cpp $*.tgt.c $*.tgt.cpp \
	    $*.global.h $*.allcv.h \
		$*.tgtex.h $*.hostdecl.h $*.tgtdecl.h $*.exportstr.h \
		$*.runtime.h $*.host.map \
		cvinit.in predownload.in \
		$*.cvinit.in $*.predownload.in $*.tgt_hdr.h \
		$*.allcv_hwdefs.h $*.allcv_simdefs.h \
		$*.exportstr_hwdefs.h $*.exportstr_simdefs.h \
		$*.tgtdecl_hwdefs.h $*.tgtdecl_simdefs.h \
		$*.tgtex_hwdefs.h $*.tgtex_simdefs.h $*.tgt_hdr.h

	$(RM) -r $(EPDIR)

	$(EP_PROCESS) $(PSD) $* "$(EP_SIMFLAGS) $(EPIC_INCLUDES)" \
	"$(EP_HWFLAGS) $(EPIC_INCLUDES)" \
	"$(PG_FLAG) $(ADD_EPFLAGS) $(EPIC_INCLUDES)"

	$(TOUCH) $(EPDIR)/$*.tgt_hdr.h

	cd $(EPDIR); $(MV) -f $*.allcv_hwdefs.h $*.allcv_simdefs.h \
		$*.exportstr_hwdefs.h $*.exportstr_simdefs.h \
		$*.hostdecl_hwdefs.h $*.hostdecl_simdefs.h \
		$*.tgtdecl_hwdefs.h $*.tgtdecl_simdefs.h \
		$*.tgtex_hwdefs.h $*.tgtex_simdefs.h $*.tgt_hdr.h \
		$(PWD)

	$(RM) cvinit.in predownload.in

	$(RM) -r $(EPDIR)

	$(TOUCH) ${@F}

# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "CleanRule()"
#
#
#  Epic+ creates an "EPIC+" subdirectory in the current directory.
#     This rule ensures that "EPIC+" will be removed when the "clean"
#     target is invoked.
#

clean::
	$(RM) -r ./EPIC+
	-$(RM) *.epic *.host.c *.host.cpp *.tgt.c *.tgt.cpp \
	    *.global.h *.allcv.h \
		*.tgtex.h *.hostdecl.h *.tgtdecl.h *.exportstr.h \
		*.runtime.h *.ext.h *.host.map \
		cvinit.in predownload.in
	-$(RM) *.epicplus *.cvinit.in *.predownload.in *.tgt_hdr.h \
		*.allcv_hwdefs.h *.allcv_simdefs.h \
		*.exportstr_hwdefs.h *.exportstr_simdefs.h \
		*.hostdecl_hwdefs.h *.hostdecl_simdefs.h \
		*.tgtdecl_hwdefs.h *.tgtdecl_simdefs.h \
		*.tgtex_hwdefs.h *.tgtex_simdefs.h *.tgt_hdr.h

# --------------------------------------------------------------------

# ====================================================================
#
#  End of included template file: "EPIC.tmpl"
#
# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Local Imakefile begins here
#
# ====================================================================

TOOLSET = EPIC

MAKE_TARGET = programs

PSD = asl3dflex

ADD_INLINE_FILES =

ADD_EFILES =

ADD_CFILES_HOST =

ADD_CFILES_TGT =

ADD_EFLAGS = -z -+

ADD_E_INCLUDES =

ADD_CFLAGS_HH =

ADD_CFLAGS_HS =

ADD_CFLAGS_TH =

ADD_CFLAGS_TS =

ADD_LINKFLAGS_HH =

ADD_LINKFLAGS_HS =

ADD_LINKFLAGS_TH =

ADD_LINKFLAGS_TS =

ADD_LIBS_HH =

ADD_LIBS_HS =

ADD_LIBS_TH =

ADD_LIBS_TS =

# --------------------------------------------------------------------
#
#  Rule: "PsdParameters()"
#
#

#
#  Rule: "EpicParameters1()"
#

hw-mgd:: hw

hw-ice:: hw

DIR_CVCONST_INCLUDE = $(TOP)/psd/psd-platform/export/noarch/include/epic

EP_FEATURES_INCLUDE = -I$(TOP)/psd/app-fast-gradient-echo-2d/src/main/epicplus_features

EPIC_INCLUDES = \
    $(ADD_E_INCLUDES) \
    -I. \
    -I$(TOP)/psd/external-interface/export/noarch/include \
    -I$(TOP)/psd/geometry-orientation/export/noarch/include \
    -I$(TOP)/psd/psd-platform/export/noarch/include     -I$(TOP)/psd/psd-platform/export/noarch/include/psdIF     -I$(TOP)/psd/psd-platform/export/noarch/include/support     -I$(TOP)/psd/psd-platform/export/noarch/include/pgen_on_host     -I$(TOP)/psd/psd-platform/export/noarch/include/pulsegen \
    -I$(TOP)/psd/psd-applications/export/noarch/inline \
    $(EPLUS_FEATURES_INCLUDES) \
    -I$(TOP)/lx/em/include \
    -I$(TOP)/lx/include \
    -I$(TOP)/host/foundation-libs/CnvEndianLib/host_static \
    -I$(TOP)/host/include \
    -I$(TOP)/mgd/include \
    -I$(TOP)/vre/support

EP_SIMFLAGS = \
    -DHOST_IO \
    -DINIT \
    -DEXTERN= \
    -DINC4CPP \
    $(M_CVS)

EP_HWFLAGS = $(EP_SIMFLAGS)

EPDIR = ./EPIC+

#
#  Rule: "EpicParameters2()"
#

MERGE_FLAG = 1

# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "BuildingEpicPsd()"
#
#

#
#  Rule: "EpicMakeTargets()"
#

hw sim $(MAKE_TARGET):: $(PSD).epic

#
#  Rule: "EpicCvCopy()"
#

hw $(MAKE_TARGET):: $(PSD).cnvendian.c
hw sim $(MAKE_TARGET):: $(PSD).cvcopy.cpp

$(PSD).cvcopy.cpp: $(PSD).epic $(PSD).allcv.h $(PSD).tgtex.h

	@echo "=========================================================="
	@echo "   Generating cvcopy functions"
	@echo "=========================================================="

	$(RM) $@

	$(EP_CONTIG) $(PSD) $@ $(PSD).allcv.h $(PSD).tgtex.h

$(PSD).cnvendian.c: $(PSD).epic $(PSD).global.h $(PSD).allcv.h \
	$(PSD).tgtex.h

	@echo "=========================================================="
	@echo "   Generating CV endian conversion code"
	@echo "=========================================================="

	$(RM) $(CNV_ENDIAN_FILES)

	$(CREATE_CNV_ENDIAN_INPUT) $(PSD).cnvendian.input.c \
		$(PSD).global.h $(PSD).allcv.h $(PSD).tgtex.h

	$(ENDIAN_CONVERTER) -i $(PSD).cnvendian.input.c -h $(PSD).cnvendian.private.h -ha $(PSD).cnvendian.api.h -hg $(PSD).cnvendian.globalvar.h -o $(PSD).cnvendian.c $(EPIC_INCLUDES) $(ENDIAN_CONVERTER_FLAGS) $(ENDIAN_EFLAG) -pre cv_cnv_endian_ -no_inc

clean::
	$(RM) $(CNV_ENDIAN_FILES) $(PSD).cvcopy.cpp $(PSD).cvcopy.c

# --------------------------------------------------------------------

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  This dependency line is found in all makefiles.  $(MAKE_TARGET)
#     should be defined in the local Imakefile.
#
# ====================================================================

all $(MAKE_TARGET):: $(ALL_OBJS)

# ====================================================================

